
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000226  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000093b  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068a  00000000  00000000  00000bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003dd  00000000  00000000  0000127d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000165c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b9  00000000  00000000  00001680  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000288  00000000  00000000  00001a39  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001cc1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>         // AVR device-specific IO definitions

/* Functions ---------------------------------------------------------*/
int main(void)
{
	DDRC = DDRC | (1<<LED_RED1);		// Set pin as output in Data Direction Register...
  80:	39 9a       	sbi	0x07, 1	; 7
	PORTC = PORTC & ~(1<<LED_RED1);		// ...and turn LED off in Data Register
  82:	41 98       	cbi	0x08, 1	; 8
	DDRC = DDRC | (1<<LED_RED2);
  84:	3a 9a       	sbi	0x07, 2	; 7
	PORTC = PORTC & ~(1<<LED_RED2);
  86:	42 98       	cbi	0x08, 2	; 8
	DDRC = DDRC | (1<<LED_RED3);
  88:	3b 9a       	sbi	0x07, 3	; 7
	PORTC = PORTC & ~(1<<LED_RED3);
  8a:	43 98       	cbi	0x08, 3	; 8
	DDRC = DDRC | (1<<LED_RED4);
  8c:	3c 9a       	sbi	0x07, 4	; 7
	PORTC = PORTC & ~(1<<LED_RED4);
  8e:	44 98       	cbi	0x08, 4	; 8
	DDRC = DDRC | (1<<LED_RED5);
  90:	3d 9a       	sbi	0x07, 5	; 7
	PORTC = PORTC & ~(1<<LED_RED5);
  92:	45 98       	cbi	0x08, 5	; 8

	// Program uses 2 leds shining at once instead of 1 for more KnigtRideder style
		PORTC = PORTC ^ (1<<LED_RED1);	// turn 1 on
  94:	98 b1       	in	r25, 0x08	; 8
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	89 27       	eor	r24, r25
  9a:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	2f ef       	ldi	r18, 0xFF	; 255
  9e:	34 e3       	ldi	r19, 0x34	; 52
  a0:	6c e0       	ldi	r22, 0x0C	; 12
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	30 40       	sbci	r19, 0x00	; 0
  a6:	60 40       	sbci	r22, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <main+0x22>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x2c>
  ac:	00 00       	nop
		_delay_ms(BLINK_DELAY);
	while (1)
	{
		PORTC = PORTC ^ (1<<LED_RED2);	// turn 2 on
  ae:	24 e0       	ldi	r18, 0x04	; 4
		_delay_ms(BLINK_DELAY);
		PORTC = PORTC ^ (1<<LED_RED1);	// turn 1 off
  b0:	52 e0       	ldi	r21, 0x02	; 2
		PORTC = PORTC ^ (1<<LED_RED3);	// turn 3 on
  b2:	98 e0       	ldi	r25, 0x08	; 8
		_delay_ms(BLINK_DELAY);
		PORTC = PORTC ^ (1<<LED_RED2);	// turn 2 off
		PORTC = PORTC ^ (1<<LED_RED4);	// turn 4 on
  b4:	80 e1       	ldi	r24, 0x10	; 16
		_delay_ms(BLINK_DELAY);
		PORTC = PORTC ^ (1<<LED_RED3);	// turn 3 off
		PORTC = PORTC ^ (1<<LED_RED5);	// turn 5 on
  b6:	40 e2       	ldi	r20, 0x20	; 32
	// Program uses 2 leds shining at once instead of 1 for more KnigtRideder style
		PORTC = PORTC ^ (1<<LED_RED1);	// turn 1 on
		_delay_ms(BLINK_DELAY);
	while (1)
	{
		PORTC = PORTC ^ (1<<LED_RED2);	// turn 2 on
  b8:	38 b1       	in	r19, 0x08	; 8
  ba:	32 27       	eor	r19, r18
  bc:	38 b9       	out	0x08, r19	; 8
  be:	7f ef       	ldi	r23, 0xFF	; 255
  c0:	34 e3       	ldi	r19, 0x34	; 52
  c2:	6c e0       	ldi	r22, 0x0C	; 12
  c4:	71 50       	subi	r23, 0x01	; 1
  c6:	30 40       	sbci	r19, 0x00	; 0
  c8:	60 40       	sbci	r22, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x44>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x4e>
  ce:	00 00       	nop
		_delay_ms(BLINK_DELAY);
		PORTC = PORTC ^ (1<<LED_RED1);	// turn 1 off
  d0:	38 b1       	in	r19, 0x08	; 8
  d2:	35 27       	eor	r19, r21
  d4:	38 b9       	out	0x08, r19	; 8
		PORTC = PORTC ^ (1<<LED_RED3);	// turn 3 on
  d6:	38 b1       	in	r19, 0x08	; 8
  d8:	39 27       	eor	r19, r25
  da:	38 b9       	out	0x08, r19	; 8
  dc:	7f ef       	ldi	r23, 0xFF	; 255
  de:	34 e3       	ldi	r19, 0x34	; 52
  e0:	6c e0       	ldi	r22, 0x0C	; 12
  e2:	71 50       	subi	r23, 0x01	; 1
  e4:	30 40       	sbci	r19, 0x00	; 0
  e6:	60 40       	sbci	r22, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x62>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x6c>
  ec:	00 00       	nop
		_delay_ms(BLINK_DELAY);
		PORTC = PORTC ^ (1<<LED_RED2);	// turn 2 off
  ee:	38 b1       	in	r19, 0x08	; 8
  f0:	32 27       	eor	r19, r18
  f2:	38 b9       	out	0x08, r19	; 8
		PORTC = PORTC ^ (1<<LED_RED4);	// turn 4 on
  f4:	38 b1       	in	r19, 0x08	; 8
  f6:	38 27       	eor	r19, r24
  f8:	38 b9       	out	0x08, r19	; 8
  fa:	7f ef       	ldi	r23, 0xFF	; 255
  fc:	34 e3       	ldi	r19, 0x34	; 52
  fe:	6c e0       	ldi	r22, 0x0C	; 12
 100:	71 50       	subi	r23, 0x01	; 1
 102:	30 40       	sbci	r19, 0x00	; 0
 104:	60 40       	sbci	r22, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x80>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x8a>
 10a:	00 00       	nop
		_delay_ms(BLINK_DELAY);
		PORTC = PORTC ^ (1<<LED_RED3);	// turn 3 off
 10c:	38 b1       	in	r19, 0x08	; 8
 10e:	39 27       	eor	r19, r25
 110:	38 b9       	out	0x08, r19	; 8
		PORTC = PORTC ^ (1<<LED_RED5);	// turn 5 on
 112:	38 b1       	in	r19, 0x08	; 8
 114:	34 27       	eor	r19, r20
 116:	38 b9       	out	0x08, r19	; 8
 118:	7f ef       	ldi	r23, 0xFF	; 255
 11a:	34 e3       	ldi	r19, 0x34	; 52
 11c:	6c e0       	ldi	r22, 0x0C	; 12
 11e:	71 50       	subi	r23, 0x01	; 1
 120:	30 40       	sbci	r19, 0x00	; 0
 122:	60 40       	sbci	r22, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x9e>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0xa8>
 128:	00 00       	nop
		_delay_ms(BLINK_DELAY);
		PORTC = PORTC ^ (1<<LED_RED4);	// turn 4 off
 12a:	38 b1       	in	r19, 0x08	; 8
 12c:	38 27       	eor	r19, r24
 12e:	38 b9       	out	0x08, r19	; 8
 130:	7f ef       	ldi	r23, 0xFF	; 255
 132:	34 e3       	ldi	r19, 0x34	; 52
 134:	6c e0       	ldi	r22, 0x0C	; 12
 136:	71 50       	subi	r23, 0x01	; 1
 138:	30 40       	sbci	r19, 0x00	; 0
 13a:	60 40       	sbci	r22, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <main+0xb6>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0xc0>
 140:	00 00       	nop
		_delay_ms(BLINK_DELAY);
		PORTC = PORTC ^ (1<<LED_RED4);	// turn 4 on 
 142:	38 b1       	in	r19, 0x08	; 8
 144:	38 27       	eor	r19, r24
 146:	38 b9       	out	0x08, r19	; 8
 148:	7f ef       	ldi	r23, 0xFF	; 255
 14a:	34 e3       	ldi	r19, 0x34	; 52
 14c:	6c e0       	ldi	r22, 0x0C	; 12
 14e:	71 50       	subi	r23, 0x01	; 1
 150:	30 40       	sbci	r19, 0x00	; 0
 152:	60 40       	sbci	r22, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <main+0xce>
 156:	00 c0       	rjmp	.+0      	; 0x158 <main+0xd8>
 158:	00 00       	nop
		_delay_ms(BLINK_DELAY);
		PORTC = PORTC ^ (1<<LED_RED5);	// turn 5 off
 15a:	38 b1       	in	r19, 0x08	; 8
 15c:	34 27       	eor	r19, r20
 15e:	38 b9       	out	0x08, r19	; 8
		PORTC = PORTC ^ (1<<LED_RED3);	// turn 3 on
 160:	38 b1       	in	r19, 0x08	; 8
 162:	39 27       	eor	r19, r25
 164:	38 b9       	out	0x08, r19	; 8
 166:	7f ef       	ldi	r23, 0xFF	; 255
 168:	34 e3       	ldi	r19, 0x34	; 52
 16a:	6c e0       	ldi	r22, 0x0C	; 12
 16c:	71 50       	subi	r23, 0x01	; 1
 16e:	30 40       	sbci	r19, 0x00	; 0
 170:	60 40       	sbci	r22, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <main+0xec>
 174:	00 c0       	rjmp	.+0      	; 0x176 <main+0xf6>
 176:	00 00       	nop
		_delay_ms(BLINK_DELAY);
		PORTC = PORTC ^ (1<<LED_RED4);	// turn 4 off
 178:	38 b1       	in	r19, 0x08	; 8
 17a:	38 27       	eor	r19, r24
 17c:	38 b9       	out	0x08, r19	; 8
		PORTC = PORTC ^ (1<<LED_RED2);	// turn 2 on
 17e:	38 b1       	in	r19, 0x08	; 8
 180:	32 27       	eor	r19, r18
 182:	38 b9       	out	0x08, r19	; 8
 184:	7f ef       	ldi	r23, 0xFF	; 255
 186:	34 e3       	ldi	r19, 0x34	; 52
 188:	6c e0       	ldi	r22, 0x0C	; 12
 18a:	71 50       	subi	r23, 0x01	; 1
 18c:	30 40       	sbci	r19, 0x00	; 0
 18e:	60 40       	sbci	r22, 0x00	; 0
 190:	e1 f7       	brne	.-8      	; 0x18a <main+0x10a>
 192:	00 c0       	rjmp	.+0      	; 0x194 <main+0x114>
 194:	00 00       	nop
		_delay_ms(BLINK_DELAY);
		PORTC = PORTC ^ (1<<LED_RED3);	// turn 3 off
 196:	38 b1       	in	r19, 0x08	; 8
 198:	39 27       	eor	r19, r25
 19a:	38 b9       	out	0x08, r19	; 8
		PORTC = PORTC ^ (1<<LED_RED1);	// turn 1 on
 19c:	38 b1       	in	r19, 0x08	; 8
 19e:	35 27       	eor	r19, r21
 1a0:	38 b9       	out	0x08, r19	; 8
 1a2:	7f ef       	ldi	r23, 0xFF	; 255
 1a4:	34 e3       	ldi	r19, 0x34	; 52
 1a6:	6c e0       	ldi	r22, 0x0C	; 12
 1a8:	71 50       	subi	r23, 0x01	; 1
 1aa:	30 40       	sbci	r19, 0x00	; 0
 1ac:	60 40       	sbci	r22, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <main+0x128>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <main+0x132>
 1b2:	00 00       	nop
		_delay_ms(BLINK_DELAY);
		PORTC = PORTC ^ (1<<LED_RED2);	// turn 2 off
 1b4:	38 b1       	in	r19, 0x08	; 8
 1b6:	32 27       	eor	r19, r18
 1b8:	38 b9       	out	0x08, r19	; 8
 1ba:	7f ef       	ldi	r23, 0xFF	; 255
 1bc:	34 e3       	ldi	r19, 0x34	; 52
 1be:	6c e0       	ldi	r22, 0x0C	; 12
 1c0:	71 50       	subi	r23, 0x01	; 1
 1c2:	30 40       	sbci	r19, 0x00	; 0
 1c4:	60 40       	sbci	r22, 0x00	; 0
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <main+0x140>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <main+0x14a>
 1ca:	00 00       	nop
 1cc:	75 cf       	rjmp	.-278    	; 0xb8 <main+0x38>

000001ce <_exit>:
 1ce:	f8 94       	cli

000001d0 <__stop_program>:
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <__stop_program>
