
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000272  00800100  00000f34  00000fc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000067  00800372  00800372  0000123a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000123a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000126c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  000012ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a34  00000000  00000000  000013fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ace  00000000  00000000  00003e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012c2  00000000  00000000  000048fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000348  00000000  00000000  00005bc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000062e  00000000  00000000  00005f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c28  00000000  00000000  00006536  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  0000715e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 03 07 	jmp	0xe06	; 0xe06 <__vector_18>
  4c:	0c 94 31 07 	jmp	0xe62	; 0xe62 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	13 e0       	ldi	r17, 0x03	; 3
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e3       	ldi	r30, 0x34	; 52
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 37       	cpi	r26, 0x72	; 114
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	a2 e7       	ldi	r26, 0x72	; 114
  8e:	b3 e0       	ldi	r27, 0x03	; 3
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 3d       	cpi	r26, 0xD9	; 217
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 42 01 	call	0x284	; 0x284 <main>
  9e:	0c 94 98 07 	jmp	0xf30	; 0xf30 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
/*--------------------------------------------------------------------*/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    *reg_name++;						    // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_config_input_nopull>:
  be:	fc 01       	movw	r30, r24
  c0:	80 81       	ld	r24, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_config_input_nopull+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_config_input_nopull+0xa>
  d0:	20 95       	com	r18
  d2:	82 23       	and	r24, r18
  d4:	80 83       	st	Z, r24
  d6:	80 81       	ld	r24, Z
  d8:	81 81       	ldd	r24, Z+1	; 0x01
  da:	28 23       	and	r18, r24
  dc:	21 83       	std	Z+1, r18	; 0x01
  de:	08 95       	ret

000000e0 <GPIO_write_low>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  e0:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  e2:	90 81       	ld	r25, Z
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <GPIO_write_low+0xe>
  ea:	22 0f       	add	r18, r18
  ec:	33 1f       	adc	r19, r19
  ee:	6a 95       	dec	r22
  f0:	e2 f7       	brpl	.-8      	; 0xea <GPIO_write_low+0xa>
  f2:	20 95       	com	r18
  f4:	29 23       	and	r18, r25
  f6:	20 83       	st	Z, r18
  f8:	08 95       	ret

000000fa <GPIO_write_high>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num);
  fa:	fc 01       	movw	r30, r24
  fc:	40 81       	ld	r20, Z
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <GPIO_write_high+0xe>
 104:	22 0f       	add	r18, r18
 106:	33 1f       	adc	r19, r19
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <GPIO_write_high+0xa>
 10c:	24 2b       	or	r18, r20
 10e:	20 83       	st	Z, r18
 110:	08 95       	ret

00000112 <GPIO_toggle>:
}

/*--------------------------------------------------------------------*/
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name ^ (1<<pin_num);
 112:	fc 01       	movw	r30, r24
 114:	40 81       	ld	r20, Z
 116:	21 e0       	ldi	r18, 0x01	; 1
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <GPIO_toggle+0xe>
 11c:	22 0f       	add	r18, r18
 11e:	33 1f       	adc	r19, r19
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <GPIO_toggle+0xa>
 124:	24 27       	eor	r18, r20
 126:	20 83       	st	Z, r18
 128:	08 95       	ret

0000012a <GPIO_read>:
}

/*--------------------------------------------------------------------*/
uint8_t GPIO_read(volatile uint8_t *reg_name, uint8_t pin_num)
{
	if(bit_is_clear(*reg_name, pin_num))
 12a:	fc 01       	movw	r30, r24
 12c:	80 81       	ld	r24, Z
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <GPIO_read+0xc>
 132:	95 95       	asr	r25
 134:	87 95       	ror	r24
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <GPIO_read+0x8>
	}
	else
	{
		return 1;
	}
 13a:	81 70       	andi	r24, 0x01	; 1
 13c:	08 95       	ret

0000013e <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
 13e:	5b 9a       	sbi	0x0b, 3	; 11
 140:	85 e0       	ldi	r24, 0x05	; 5
 142:	8a 95       	dec	r24
 144:	f1 f7       	brne	.-4      	; 0x142 <toggle_e+0x4>
 146:	00 00       	nop
 148:	5b 98       	cbi	0x0b, 3	; 11
 14a:	08 95       	ret

0000014c <lcd_write>:
 14c:	cf 93       	push	r28
 14e:	c8 2f       	mov	r28, r24
 150:	66 23       	and	r22, r22
 152:	11 f0       	breq	.+4      	; 0x158 <lcd_write+0xc>
 154:	5a 9a       	sbi	0x0b, 2	; 11
 156:	01 c0       	rjmp	.+2      	; 0x15a <lcd_write+0xe>
 158:	5a 98       	cbi	0x0b, 2	; 11
 15a:	54 9a       	sbi	0x0a, 4	; 10
 15c:	55 9a       	sbi	0x0a, 5	; 10
 15e:	56 9a       	sbi	0x0a, 6	; 10
 160:	57 9a       	sbi	0x0a, 7	; 10
 162:	5f 98       	cbi	0x0b, 7	; 11
 164:	5e 98       	cbi	0x0b, 6	; 11
 166:	5d 98       	cbi	0x0b, 5	; 11
 168:	5c 98       	cbi	0x0b, 4	; 11
 16a:	cc 23       	and	r28, r28
 16c:	0c f4       	brge	.+2      	; 0x170 <lcd_write+0x24>
 16e:	5f 9a       	sbi	0x0b, 7	; 11
 170:	c6 fd       	sbrc	r28, 6
 172:	5e 9a       	sbi	0x0b, 6	; 11
 174:	c5 fd       	sbrc	r28, 5
 176:	5d 9a       	sbi	0x0b, 5	; 11
 178:	c4 fd       	sbrc	r28, 4
 17a:	5c 9a       	sbi	0x0b, 4	; 11
 17c:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
 180:	5f 98       	cbi	0x0b, 7	; 11
 182:	5e 98       	cbi	0x0b, 6	; 11
 184:	5d 98       	cbi	0x0b, 5	; 11
 186:	5c 98       	cbi	0x0b, 4	; 11
 188:	c3 fd       	sbrc	r28, 3
 18a:	5f 9a       	sbi	0x0b, 7	; 11
 18c:	c2 fd       	sbrc	r28, 2
 18e:	5e 9a       	sbi	0x0b, 6	; 11
 190:	c1 fd       	sbrc	r28, 1
 192:	5d 9a       	sbi	0x0b, 5	; 11
 194:	c0 fd       	sbrc	r28, 0
 196:	5c 9a       	sbi	0x0b, 4	; 11
 198:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
 19c:	5c 9a       	sbi	0x0b, 4	; 11
 19e:	5d 9a       	sbi	0x0b, 5	; 11
 1a0:	5e 9a       	sbi	0x0b, 6	; 11
 1a2:	5f 9a       	sbi	0x0b, 7	; 11
 1a4:	87 eb       	ldi	r24, 0xB7	; 183
 1a6:	9b e0       	ldi	r25, 0x0B	; 11
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <lcd_write+0x5c>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <lcd_write+0x62>
 1ae:	00 00       	nop
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <lcd_command>:
 1b4:	60 e0       	ldi	r22, 0x00	; 0
 1b6:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_write>
 1ba:	08 95       	ret

000001bc <lcd_gotoxy>:
 1bc:	61 11       	cpse	r22, r1
 1be:	04 c0       	rjmp	.+8      	; 0x1c8 <lcd_gotoxy+0xc>
 1c0:	80 58       	subi	r24, 0x80	; 128
 1c2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
 1c6:	08 95       	ret
 1c8:	80 54       	subi	r24, 0x40	; 64
 1ca:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
 1ce:	08 95       	ret

000001d0 <lcd_clrscr>:
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
 1d6:	08 95       	ret

000001d8 <lcd_putc>:
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_write>
 1de:	08 95       	ret

000001e0 <lcd_puts>:
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	ec 01       	movw	r28, r24
 1e6:	21 96       	adiw	r28, 0x01	; 1
 1e8:	fc 01       	movw	r30, r24
 1ea:	80 81       	ld	r24, Z
 1ec:	88 23       	and	r24, r24
 1ee:	29 f0       	breq	.+10     	; 0x1fa <lcd_puts+0x1a>
 1f0:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_putc>
 1f4:	89 91       	ld	r24, Y+
 1f6:	81 11       	cpse	r24, r1
 1f8:	fb cf       	rjmp	.-10     	; 0x1f0 <lcd_puts+0x10>
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	08 95       	ret

00000200 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 200:	cf 93       	push	r28
 202:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 204:	52 9a       	sbi	0x0a, 2	; 10
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 206:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 208:	53 9a       	sbi	0x0a, 3	; 10
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 20a:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 20c:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 20e:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 210:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	99 ef       	ldi	r25, 0xF9	; 249
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <lcd_init+0x16>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <lcd_init+0x1c>
 21c:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 21e:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 220:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 222:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
 226:	8f e1       	ldi	r24, 0x1F	; 31
 228:	9e e4       	ldi	r25, 0x4E	; 78
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <lcd_init+0x2a>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <lcd_init+0x30>
 230:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 232:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
 236:	8f ef       	ldi	r24, 0xFF	; 255
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <lcd_init+0x3a>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <lcd_init+0x40>
 240:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 242:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <lcd_init+0x4a>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <lcd_init+0x50>
 250:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 252:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 254:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
 258:	8f ef       	ldi	r24, 0xFF	; 255
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <lcd_init+0x5c>
 260:	00 c0       	rjmp	.+0      	; 0x262 <lcd_init+0x62>
 262:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 264:	88 e2       	ldi	r24, 0x28	; 40
 266:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 26a:	88 e0       	ldi	r24, 0x08	; 8
 26c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 270:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 274:	86 e0       	ldi	r24, 0x06	; 6
 276:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 27a:	8c 2f       	mov	r24, r28
 27c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
 280:	cf 91       	pop	r28
 282:	08 95       	ret

00000284 <main>:
};

int main(void)
{	
    // 4x3 keyboard input configuration
    GPIO_config_input_nopull(&DDRC, KEYPAD0);
 284:	60 e0       	ldi	r22, 0x00	; 0
 286:	87 e2       	ldi	r24, 0x27	; 39
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_nopull>
    GPIO_config_input_nopull(&DDRC, KEYPAD1);
 28e:	61 e0       	ldi	r22, 0x01	; 1
 290:	87 e2       	ldi	r24, 0x27	; 39
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_nopull>
    GPIO_config_input_nopull(&DDRC, KEYPAD2);
 298:	62 e0       	ldi	r22, 0x02	; 2
 29a:	87 e2       	ldi	r24, 0x27	; 39
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_nopull>
    // 4x3 keyboard output configuration
    GPIO_config_output(&DDRC, KEYPAD3);
 2a2:	63 e0       	ldi	r22, 0x03	; 3
 2a4:	87 e2       	ldi	r24, 0x27	; 39
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRC, KEYPAD4);
 2ac:	64 e0       	ldi	r22, 0x04	; 4
 2ae:	87 e2       	ldi	r24, 0x27	; 39
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRC, KEYPAD5);
 2b6:	65 e0       	ldi	r22, 0x05	; 5
 2b8:	87 e2       	ldi	r24, 0x27	; 39
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRC, KEYPAD6);
 2c0:	66 e0       	ldi	r22, 0x06	; 6
 2c2:	87 e2       	ldi	r24, 0x27	; 39
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>

    // DAC output configuration
    GPIO_config_output(&DDRB, DAC0);
 2ca:	60 e0       	ldi	r22, 0x00	; 0
 2cc:	84 e2       	ldi	r24, 0x24	; 36
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, DAC1);
 2d4:	61 e0       	ldi	r22, 0x01	; 1
 2d6:	84 e2       	ldi	r24, 0x24	; 36
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, DAC2);
 2de:	62 e0       	ldi	r22, 0x02	; 2
 2e0:	84 e2       	ldi	r24, 0x24	; 36
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, DAC3);
 2e8:	63 e0       	ldi	r22, 0x03	; 3
 2ea:	84 e2       	ldi	r24, 0x24	; 36
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, DAC4);
 2f2:	64 e0       	ldi	r22, 0x04	; 4
 2f4:	84 e2       	ldi	r24, 0x24	; 36
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, DAC5);
 2fc:	65 e0       	ldi	r22, 0x05	; 5
 2fe:	84 e2       	ldi	r24, 0x24	; 36
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, DAC6);
 306:	66 e0       	ldi	r22, 0x06	; 6
 308:	84 e2       	ldi	r24, 0x24	; 36
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, DAC7);
 310:	67 e0       	ldi	r22, 0x07	; 7
 312:	84 e2       	ldi	r24, 0x24	; 36
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>

    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 31a:	8c e0       	ldi	r24, 0x0C	; 12
 31c:	0e 94 00 01 	call	0x200	; 0x200 <lcd_init>

    // Write to LCD display
    lcd_gotoxy(0, 0);
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
    lcd_puts("Output Signal");
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	92 e0       	ldi	r25, 0x02	; 2
 32c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>

    // Configuration of 8-bit Timer/Counter0 for signal generator
    // Overflow interrupt every 128 us
    TIM0_overflow_128us();
 330:	85 b5       	in	r24, 0x25	; 37
 332:	8a 7f       	andi	r24, 0xFA	; 250
 334:	85 bd       	out	0x25, r24	; 37
 336:	85 b5       	in	r24, 0x25	; 37
 338:	82 60       	ori	r24, 0x02	; 2
 33a:	85 bd       	out	0x25, r24	; 37
    TIM0_overflow_interrupt_enable();
 33c:	ee e6       	ldi	r30, 0x6E	; 110
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	80 81       	ld	r24, Z
 342:	81 60       	ori	r24, 0x01	; 1
 344:	80 83       	st	Z, r24
	
    // Configuration of 16-bit Timer/Counter0 for signal generator
    // Overflow interrupt every 262 us
    TIM1_overflow_262ms();
 346:	e1 e8       	ldi	r30, 0x81	; 129
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	80 81       	ld	r24, Z
 34c:	8b 7f       	andi	r24, 0xFB	; 251
 34e:	80 83       	st	Z, r24
 350:	80 81       	ld	r24, Z
 352:	83 60       	ori	r24, 0x03	; 3
 354:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 356:	ef e6       	ldi	r30, 0x6F	; 111
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	80 81       	ld	r24, Z
 35c:	81 60       	ori	r24, 0x01	; 1
 35e:	80 83       	st	Z, r24
	
    // Initialization of UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600,F_CPU));
 360:	87 e6       	ldi	r24, 0x67	; 103
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <uart_init>
	
    // Enables interrupts by setting the global interrupt mask
    sei();
 368:	78 94       	sei
 36a:	ff cf       	rjmp	.-2      	; 0x36a <main+0xe6>

0000036c <__vector_16>:

/* Interrupt service routines ----------------------------------------*/

// Interrupts from Timer/Counter0 can generate 6 various signals
ISR(TIMER0_OVF_vect)
{
 36c:	1f 92       	push	r1
 36e:	0f 92       	push	r0
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	0f 92       	push	r0
 374:	11 24       	eor	r1, r1
 376:	2f 93       	push	r18
 378:	3f 93       	push	r19
 37a:	4f 93       	push	r20
 37c:	5f 93       	push	r21
 37e:	6f 93       	push	r22
 380:	7f 93       	push	r23
 382:	8f 93       	push	r24
 384:	9f 93       	push	r25
 386:	af 93       	push	r26
 388:	bf 93       	push	r27
 38a:	cf 93       	push	r28
 38c:	ef 93       	push	r30
 38e:	ff 93       	push	r31
    // sine wave
    if (keypad == 1)
 390:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <__data_end>
 394:	81 30       	cpi	r24, 0x01	; 1
 396:	09 f0       	breq	.+2      	; 0x39a <__vector_16+0x2e>
 398:	c9 c0       	rjmp	.+402    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
    {
        if (counter == 0)
 39a:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 39e:	81 11       	cpse	r24, r1
 3a0:	28 c0       	rjmp	.+80     	; 0x3f2 <__vector_16+0x86>
        {
            GPIO_write_low(&PORTB, DAC0);
 3a2:	60 e0       	ldi	r22, 0x00	; 0
 3a4:	85 e2       	ldi	r24, 0x25	; 37
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC1);
 3ac:	61 e0       	ldi	r22, 0x01	; 1
 3ae:	85 e2       	ldi	r24, 0x25	; 37
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC2);
 3b6:	62 e0       	ldi	r22, 0x02	; 2
 3b8:	85 e2       	ldi	r24, 0x25	; 37
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC3);
 3c0:	63 e0       	ldi	r22, 0x03	; 3
 3c2:	85 e2       	ldi	r24, 0x25	; 37
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC4);
 3ca:	64 e0       	ldi	r22, 0x04	; 4
 3cc:	85 e2       	ldi	r24, 0x25	; 37
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC5);
 3d4:	65 e0       	ldi	r22, 0x05	; 5
 3d6:	85 e2       	ldi	r24, 0x25	; 37
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC6);
 3de:	66 e0       	ldi	r22, 0x06	; 6
 3e0:	85 e2       	ldi	r24, 0x25	; 37
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC7);
 3e8:	67 e0       	ldi	r22, 0x07	; 7
 3ea:	85 e2       	ldi	r24, 0x25	; 37
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        }
        uint8_t sinevalue = sinewave[counter];     //helping variable used to set output pin values
 3f2:	e0 91 73 03 	lds	r30, 0x0373	; 0x800373 <counter>
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	e0 50       	subi	r30, 0x00	; 0
 3fa:	ff 4f       	sbci	r31, 0xFF	; 255
 3fc:	c0 81       	ld	r28, Z
        if (sinevalue-127>0)                {GPIO_write_high(&PORTB, DAC7); sinevalue=sinevalue-128;}
 3fe:	8c 2f       	mov	r24, r28
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	8f 57       	subi	r24, 0x7F	; 127
 404:	91 09       	sbc	r25, r1
 406:	18 16       	cp	r1, r24
 408:	19 06       	cpc	r1, r25
 40a:	3c f4       	brge	.+14     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 40c:	67 e0       	ldi	r22, 0x07	; 7
 40e:	85 e2       	ldi	r24, 0x25	; 37
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
 416:	c0 58       	subi	r28, 0x80	; 128
 418:	05 c0       	rjmp	.+10     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
        else GPIO_write_low(&PORTB, DAC7);
 41a:	67 e0       	ldi	r22, 0x07	; 7
 41c:	85 e2       	ldi	r24, 0x25	; 37
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        if (sinevalue-63>0)                 {GPIO_write_high(&PORTB, DAC6); sinevalue=sinevalue-64;}
 424:	8c 2f       	mov	r24, r28
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	cf 97       	sbiw	r24, 0x3f	; 63
 42a:	18 16       	cp	r1, r24
 42c:	19 06       	cpc	r1, r25
 42e:	3c f4       	brge	.+14     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 430:	66 e0       	ldi	r22, 0x06	; 6
 432:	85 e2       	ldi	r24, 0x25	; 37
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
 43a:	c0 54       	subi	r28, 0x40	; 64
 43c:	05 c0       	rjmp	.+10     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
        else GPIO_write_low(&PORTB, DAC6);
 43e:	66 e0       	ldi	r22, 0x06	; 6
 440:	85 e2       	ldi	r24, 0x25	; 37
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        if (sinevalue-31>0)                 {GPIO_write_high(&PORTB, DAC5); sinevalue=sinevalue-32;}
 448:	8c 2f       	mov	r24, r28
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	4f 97       	sbiw	r24, 0x1f	; 31
 44e:	18 16       	cp	r1, r24
 450:	19 06       	cpc	r1, r25
 452:	3c f4       	brge	.+14     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 454:	65 e0       	ldi	r22, 0x05	; 5
 456:	85 e2       	ldi	r24, 0x25	; 37
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
 45e:	c0 52       	subi	r28, 0x20	; 32
 460:	05 c0       	rjmp	.+10     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
        else GPIO_write_low(&PORTB, DAC5);
 462:	65 e0       	ldi	r22, 0x05	; 5
 464:	85 e2       	ldi	r24, 0x25	; 37
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        if (sinevalue-15>0)                 {GPIO_write_high(&PORTB, DAC4); sinevalue=sinevalue-16;}
 46c:	8c 2f       	mov	r24, r28
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	0f 97       	sbiw	r24, 0x0f	; 15
 472:	18 16       	cp	r1, r24
 474:	19 06       	cpc	r1, r25
 476:	3c f4       	brge	.+14     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 478:	64 e0       	ldi	r22, 0x04	; 4
 47a:	85 e2       	ldi	r24, 0x25	; 37
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
 482:	c0 51       	subi	r28, 0x10	; 16
 484:	05 c0       	rjmp	.+10     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
        else GPIO_write_low(&PORTB, DAC4);
 486:	64 e0       	ldi	r22, 0x04	; 4
 488:	85 e2       	ldi	r24, 0x25	; 37
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        if (sinevalue-7>0)                  {GPIO_write_high(&PORTB, DAC3); sinevalue=sinevalue-8;}
 490:	8c 2f       	mov	r24, r28
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	07 97       	sbiw	r24, 0x07	; 7
 496:	18 16       	cp	r1, r24
 498:	19 06       	cpc	r1, r25
 49a:	3c f4       	brge	.+14     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 49c:	63 e0       	ldi	r22, 0x03	; 3
 49e:	85 e2       	ldi	r24, 0x25	; 37
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
 4a6:	c8 50       	subi	r28, 0x08	; 8
 4a8:	05 c0       	rjmp	.+10     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
        else GPIO_write_low(&PORTB, DAC3);
 4aa:	63 e0       	ldi	r22, 0x03	; 3
 4ac:	85 e2       	ldi	r24, 0x25	; 37
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        if (sinevalue-3>0)                  {GPIO_write_high(&PORTB, DAC2); sinevalue=sinevalue-4;}
 4b4:	8c 2f       	mov	r24, r28
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	03 97       	sbiw	r24, 0x03	; 3
 4ba:	18 16       	cp	r1, r24
 4bc:	19 06       	cpc	r1, r25
 4be:	3c f4       	brge	.+14     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 4c0:	62 e0       	ldi	r22, 0x02	; 2
 4c2:	85 e2       	ldi	r24, 0x25	; 37
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
 4ca:	c4 50       	subi	r28, 0x04	; 4
 4cc:	05 c0       	rjmp	.+10     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
        else GPIO_write_low(&PORTB, DAC2);
 4ce:	62 e0       	ldi	r22, 0x02	; 2
 4d0:	85 e2       	ldi	r24, 0x25	; 37
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        if (sinevalue-->0)                  {GPIO_write_high(&PORTB, DAC1); sinevalue=sinevalue-2;}
 4d8:	cc 23       	and	r28, r28
 4da:	41 f0       	breq	.+16     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
 4dc:	61 e0       	ldi	r22, 0x01	; 1
 4de:	85 e2       	ldi	r24, 0x25	; 37
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        else GPIO_write_low(&PORTB, DAC1);
        if (sinevalue>0)                    {GPIO_write_high(&PORTB, DAC0);}
 4e6:	c3 30       	cpi	r28, 0x03	; 3
 4e8:	61 f0       	breq	.+24     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 4ea:	05 c0       	rjmp	.+10     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
        if (sinevalue-7>0)                  {GPIO_write_high(&PORTB, DAC3); sinevalue=sinevalue-8;}
        else GPIO_write_low(&PORTB, DAC3);
        if (sinevalue-3>0)                  {GPIO_write_high(&PORTB, DAC2); sinevalue=sinevalue-4;}
        else GPIO_write_low(&PORTB, DAC2);
        if (sinevalue-->0)                  {GPIO_write_high(&PORTB, DAC1); sinevalue=sinevalue-2;}
        else GPIO_write_low(&PORTB, DAC1);
 4ec:	61 e0       	ldi	r22, 0x01	; 1
 4ee:	85 e2       	ldi	r24, 0x25	; 37
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        if (sinevalue>0)                    {GPIO_write_high(&PORTB, DAC0);}
 4f6:	60 e0       	ldi	r22, 0x00	; 0
 4f8:	85 e2       	ldi	r24, 0x25	; 37
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
 500:	05 c0       	rjmp	.+10     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
        else GPIO_write_low(&PORTB, DAC0);
 502:	60 e0       	ldi	r22, 0x00	; 0
 504:	85 e2       	ldi	r24, 0x25	; 37
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        counter++;
 50c:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 510:	8f 5f       	subi	r24, 0xFF	; 255
        if (counter == 255) counter = 0;
 512:	8f 3f       	cpi	r24, 0xFF	; 255
 514:	19 f0       	breq	.+6      	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
        else GPIO_write_low(&PORTB, DAC2);
        if (sinevalue-->0)                  {GPIO_write_high(&PORTB, DAC1); sinevalue=sinevalue-2;}
        else GPIO_write_low(&PORTB, DAC1);
        if (sinevalue>0)                    {GPIO_write_high(&PORTB, DAC0);}
        else GPIO_write_low(&PORTB, DAC0);
        counter++;
 516:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <counter>
 51a:	08 c0       	rjmp	.+16     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
        if (counter == 255) counter = 0;
 51c:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <counter>
	}

    // square wave
    if (keypad == 2)
 520:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <__data_end>
 524:	82 30       	cpi	r24, 0x02	; 2
 526:	09 f0       	breq	.+2      	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
 528:	9b c2       	rjmp	.+1334   	; 0xa60 <__stack+0x161>
 52a:	09 c0       	rjmp	.+18     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 52c:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <__data_end>
 530:	82 30       	cpi	r24, 0x02	; 2
 532:	09 f0       	breq	.+2      	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
 534:	68 c0       	rjmp	.+208    	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
    {
        if (counter == 0)
 536:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 53a:	81 11       	cpse	r24, r1
 53c:	28 c0       	rjmp	.+80     	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
        {
            GPIO_write_high(&PORTB, DAC0);
 53e:	60 e0       	ldi	r22, 0x00	; 0
 540:	85 e2       	ldi	r24, 0x25	; 37
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
            GPIO_write_high(&PORTB, DAC1);
 548:	61 e0       	ldi	r22, 0x01	; 1
 54a:	85 e2       	ldi	r24, 0x25	; 37
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
            GPIO_write_high(&PORTB, DAC2);
 552:	62 e0       	ldi	r22, 0x02	; 2
 554:	85 e2       	ldi	r24, 0x25	; 37
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
            GPIO_write_high(&PORTB, DAC3);
 55c:	63 e0       	ldi	r22, 0x03	; 3
 55e:	85 e2       	ldi	r24, 0x25	; 37
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
            GPIO_write_high(&PORTB, DAC4);
 566:	64 e0       	ldi	r22, 0x04	; 4
 568:	85 e2       	ldi	r24, 0x25	; 37
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
            GPIO_write_high(&PORTB, DAC5);
 570:	65 e0       	ldi	r22, 0x05	; 5
 572:	85 e2       	ldi	r24, 0x25	; 37
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
            GPIO_write_high(&PORTB, DAC6);
 57a:	66 e0       	ldi	r22, 0x06	; 6
 57c:	85 e2       	ldi	r24, 0x25	; 37
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
            GPIO_write_high(&PORTB, DAC7);
 584:	67 e0       	ldi	r22, 0x07	; 7
 586:	85 e2       	ldi	r24, 0x25	; 37
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        }
        counter++;
 58e:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 592:	8f 5f       	subi	r24, 0xFF	; 255
 594:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <counter>
        if (counter == 128)
 598:	80 38       	cpi	r24, 0x80	; 128
 59a:	41 f5       	brne	.+80     	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
        {
            GPIO_write_low(&PORTB, DAC0);
 59c:	60 e0       	ldi	r22, 0x00	; 0
 59e:	85 e2       	ldi	r24, 0x25	; 37
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC1);
 5a6:	61 e0       	ldi	r22, 0x01	; 1
 5a8:	85 e2       	ldi	r24, 0x25	; 37
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC2);
 5b0:	62 e0       	ldi	r22, 0x02	; 2
 5b2:	85 e2       	ldi	r24, 0x25	; 37
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC3);
 5ba:	63 e0       	ldi	r22, 0x03	; 3
 5bc:	85 e2       	ldi	r24, 0x25	; 37
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC4);
 5c4:	64 e0       	ldi	r22, 0x04	; 4
 5c6:	85 e2       	ldi	r24, 0x25	; 37
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC5);
 5ce:	65 e0       	ldi	r22, 0x05	; 5
 5d0:	85 e2       	ldi	r24, 0x25	; 37
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC6);
 5d8:	66 e0       	ldi	r22, 0x06	; 6
 5da:	85 e2       	ldi	r24, 0x25	; 37
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC7);
 5e2:	67 e0       	ldi	r22, 0x07	; 7
 5e4:	85 e2       	ldi	r24, 0x25	; 37
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        }
        if (counter == 255) counter = 0;
 5ec:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 5f0:	8f 3f       	cpi	r24, 0xFF	; 255
 5f2:	09 f0       	breq	.+2      	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
 5f4:	2f c2       	rjmp	.+1118   	; 0xa54 <__stack+0x155>
 5f6:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <counter>
    }

    // rising sawtooth wave
    if (keypad == 3)
 5fa:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <__data_end>
 5fe:	83 30       	cpi	r24, 0x03	; 3
 600:	09 f0       	breq	.+2      	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
 602:	82 c0       	rjmp	.+260    	; 0x708 <__LOCK_REGION_LENGTH__+0x308>
 604:	10 c0       	rjmp	.+32     	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
 606:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <__data_end>
 60a:	83 30       	cpi	r24, 0x03	; 3
 60c:	09 f0       	breq	.+2      	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
 60e:	7c c0       	rjmp	.+248    	; 0x708 <__LOCK_REGION_LENGTH__+0x308>
    {
        if (counter == 255) counter = 0;
 610:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 614:	8f 3f       	cpi	r24, 0xFF	; 255
 616:	19 f4       	brne	.+6      	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
 618:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <counter>
 61c:	04 c0       	rjmp	.+8      	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
        if (counter == 0)
 61e:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 622:	81 11       	cpse	r24, r1
 624:	28 c0       	rjmp	.+80     	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
        {
            GPIO_write_low(&PORTB, DAC0);
 626:	60 e0       	ldi	r22, 0x00	; 0
 628:	85 e2       	ldi	r24, 0x25	; 37
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC1);
 630:	61 e0       	ldi	r22, 0x01	; 1
 632:	85 e2       	ldi	r24, 0x25	; 37
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC2);
 63a:	62 e0       	ldi	r22, 0x02	; 2
 63c:	85 e2       	ldi	r24, 0x25	; 37
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC3);
 644:	63 e0       	ldi	r22, 0x03	; 3
 646:	85 e2       	ldi	r24, 0x25	; 37
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC4);
 64e:	64 e0       	ldi	r22, 0x04	; 4
 650:	85 e2       	ldi	r24, 0x25	; 37
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC5);
 658:	65 e0       	ldi	r22, 0x05	; 5
 65a:	85 e2       	ldi	r24, 0x25	; 37
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC6);
 662:	66 e0       	ldi	r22, 0x06	; 6
 664:	85 e2       	ldi	r24, 0x25	; 37
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC7);
 66c:	67 e0       	ldi	r22, 0x07	; 7
 66e:	85 e2       	ldi	r24, 0x25	; 37
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        }
        counter++;
 676:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 67a:	8f 5f       	subi	r24, 0xFF	; 255
 67c:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <counter>
        if (counter %1 == 0)		GPIO_toggle(&PORTB, DAC0);
 680:	60 e0       	ldi	r22, 0x00	; 0
 682:	85 e2       	ldi	r24, 0x25	; 37
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
        if (counter %2 == 0)		GPIO_toggle(&PORTB, DAC1);
 68a:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 68e:	80 fd       	sbrc	r24, 0
 690:	05 c0       	rjmp	.+10     	; 0x69c <__LOCK_REGION_LENGTH__+0x29c>
 692:	61 e0       	ldi	r22, 0x01	; 1
 694:	85 e2       	ldi	r24, 0x25	; 37
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
        if (counter %4 == 0)		GPIO_toggle(&PORTB, DAC2);
 69c:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 6a0:	83 70       	andi	r24, 0x03	; 3
 6a2:	29 f4       	brne	.+10     	; 0x6ae <__LOCK_REGION_LENGTH__+0x2ae>
 6a4:	62 e0       	ldi	r22, 0x02	; 2
 6a6:	85 e2       	ldi	r24, 0x25	; 37
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
        if (counter %8 == 0)		GPIO_toggle(&PORTB, DAC3);
 6ae:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 6b2:	87 70       	andi	r24, 0x07	; 7
 6b4:	29 f4       	brne	.+10     	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
 6b6:	63 e0       	ldi	r22, 0x03	; 3
 6b8:	85 e2       	ldi	r24, 0x25	; 37
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
        if (counter %16 == 0)		GPIO_toggle(&PORTB, DAC4);
 6c0:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 6c4:	8f 70       	andi	r24, 0x0F	; 15
 6c6:	29 f4       	brne	.+10     	; 0x6d2 <__LOCK_REGION_LENGTH__+0x2d2>
 6c8:	64 e0       	ldi	r22, 0x04	; 4
 6ca:	85 e2       	ldi	r24, 0x25	; 37
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
        if (counter %32 == 0)		GPIO_toggle(&PORTB, DAC5);
 6d2:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 6d6:	8f 71       	andi	r24, 0x1F	; 31
 6d8:	29 f4       	brne	.+10     	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
 6da:	65 e0       	ldi	r22, 0x05	; 5
 6dc:	85 e2       	ldi	r24, 0x25	; 37
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
        if (counter %64 == 0)		GPIO_toggle(&PORTB, DAC6);
 6e4:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 6e8:	8f 73       	andi	r24, 0x3F	; 63
 6ea:	29 f4       	brne	.+10     	; 0x6f6 <__LOCK_REGION_LENGTH__+0x2f6>
 6ec:	66 e0       	ldi	r22, 0x06	; 6
 6ee:	85 e2       	ldi	r24, 0x25	; 37
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
        if (counter %128 == 0)		GPIO_toggle(&PORTB, DAC7);
 6f6:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 6fa:	8f 77       	andi	r24, 0x7F	; 127
 6fc:	29 f4       	brne	.+10     	; 0x708 <__LOCK_REGION_LENGTH__+0x308>
 6fe:	67 e0       	ldi	r22, 0x07	; 7
 700:	85 e2       	ldi	r24, 0x25	; 37
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
    }

    // falling sawtooth wave
    if (keypad == 4)
 708:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <__data_end>
 70c:	84 30       	cpi	r24, 0x04	; 4
 70e:	09 f0       	breq	.+2      	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
 710:	7a c0       	rjmp	.+244    	; 0x806 <__LOCK_REGION_LENGTH__+0x406>
    {
        if (counter == 255) counter = 0;
 712:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 716:	8f 3f       	cpi	r24, 0xFF	; 255
 718:	19 f4       	brne	.+6      	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
 71a:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <counter>
 71e:	02 c0       	rjmp	.+4      	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
        if (counter == 0)
 720:	81 11       	cpse	r24, r1
 722:	28 c0       	rjmp	.+80     	; 0x774 <__LOCK_REGION_LENGTH__+0x374>
        {
            GPIO_write_high(&PORTB, DAC0);
 724:	60 e0       	ldi	r22, 0x00	; 0
 726:	85 e2       	ldi	r24, 0x25	; 37
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
            GPIO_write_high(&PORTB, DAC1);
 72e:	61 e0       	ldi	r22, 0x01	; 1
 730:	85 e2       	ldi	r24, 0x25	; 37
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
            GPIO_write_high(&PORTB, DAC2);
 738:	62 e0       	ldi	r22, 0x02	; 2
 73a:	85 e2       	ldi	r24, 0x25	; 37
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
            GPIO_write_high(&PORTB, DAC3);
 742:	63 e0       	ldi	r22, 0x03	; 3
 744:	85 e2       	ldi	r24, 0x25	; 37
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
            GPIO_write_high(&PORTB, DAC4);
 74c:	64 e0       	ldi	r22, 0x04	; 4
 74e:	85 e2       	ldi	r24, 0x25	; 37
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
            GPIO_write_high(&PORTB, DAC5);
 756:	65 e0       	ldi	r22, 0x05	; 5
 758:	85 e2       	ldi	r24, 0x25	; 37
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
            GPIO_write_high(&PORTB, DAC6);
 760:	66 e0       	ldi	r22, 0x06	; 6
 762:	85 e2       	ldi	r24, 0x25	; 37
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
            GPIO_write_high(&PORTB, DAC7);
 76a:	67 e0       	ldi	r22, 0x07	; 7
 76c:	85 e2       	ldi	r24, 0x25	; 37
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        }
        counter++;
 774:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 778:	8f 5f       	subi	r24, 0xFF	; 255
 77a:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <counter>
        if (counter %1 == 0)		GPIO_toggle(&PORTB, DAC0);
 77e:	60 e0       	ldi	r22, 0x00	; 0
 780:	85 e2       	ldi	r24, 0x25	; 37
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
        if (counter %2 == 0)		GPIO_toggle(&PORTB, DAC1);
 788:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 78c:	80 fd       	sbrc	r24, 0
 78e:	05 c0       	rjmp	.+10     	; 0x79a <__LOCK_REGION_LENGTH__+0x39a>
 790:	61 e0       	ldi	r22, 0x01	; 1
 792:	85 e2       	ldi	r24, 0x25	; 37
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
        if (counter %4 == 0)		GPIO_toggle(&PORTB, DAC2);
 79a:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 79e:	83 70       	andi	r24, 0x03	; 3
 7a0:	29 f4       	brne	.+10     	; 0x7ac <__LOCK_REGION_LENGTH__+0x3ac>
 7a2:	62 e0       	ldi	r22, 0x02	; 2
 7a4:	85 e2       	ldi	r24, 0x25	; 37
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
        if (counter %8 == 0)		GPIO_toggle(&PORTB, DAC3);
 7ac:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 7b0:	87 70       	andi	r24, 0x07	; 7
 7b2:	29 f4       	brne	.+10     	; 0x7be <__LOCK_REGION_LENGTH__+0x3be>
 7b4:	63 e0       	ldi	r22, 0x03	; 3
 7b6:	85 e2       	ldi	r24, 0x25	; 37
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
        if (counter %16 == 0)		GPIO_toggle(&PORTB, DAC4);
 7be:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 7c2:	8f 70       	andi	r24, 0x0F	; 15
 7c4:	29 f4       	brne	.+10     	; 0x7d0 <__LOCK_REGION_LENGTH__+0x3d0>
 7c6:	64 e0       	ldi	r22, 0x04	; 4
 7c8:	85 e2       	ldi	r24, 0x25	; 37
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
        if (counter %32 == 0)		GPIO_toggle(&PORTB, DAC5);
 7d0:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 7d4:	8f 71       	andi	r24, 0x1F	; 31
 7d6:	29 f4       	brne	.+10     	; 0x7e2 <__LOCK_REGION_LENGTH__+0x3e2>
 7d8:	65 e0       	ldi	r22, 0x05	; 5
 7da:	85 e2       	ldi	r24, 0x25	; 37
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
        if (counter %64 == 0)		GPIO_toggle(&PORTB, DAC6);
 7e2:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 7e6:	8f 73       	andi	r24, 0x3F	; 63
 7e8:	29 f4       	brne	.+10     	; 0x7f4 <__LOCK_REGION_LENGTH__+0x3f4>
 7ea:	66 e0       	ldi	r22, 0x06	; 6
 7ec:	85 e2       	ldi	r24, 0x25	; 37
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
        if (counter %128 == 0)		GPIO_toggle(&PORTB, DAC7);
 7f4:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 7f8:	8f 77       	andi	r24, 0x7F	; 127
 7fa:	29 f4       	brne	.+10     	; 0x806 <__LOCK_REGION_LENGTH__+0x406>
 7fc:	67 e0       	ldi	r22, 0x07	; 7
 7fe:	85 e2       	ldi	r24, 0x25	; 37
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
    }

    // triangle wave
    if (keypad == 5)
 806:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <__data_end>
 80a:	85 30       	cpi	r24, 0x05	; 5
 80c:	09 f0       	breq	.+2      	; 0x810 <__LOCK_REGION_LENGTH__+0x410>
 80e:	7c c0       	rjmp	.+248    	; 0x908 <__stack+0x9>
    {
        if (counter == 0)
 810:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 814:	81 11       	cpse	r24, r1
 816:	28 c0       	rjmp	.+80     	; 0x868 <__LOCK_REGION_LENGTH__+0x468>
        {
            GPIO_write_low(&PORTB, DAC0);
 818:	60 e0       	ldi	r22, 0x00	; 0
 81a:	85 e2       	ldi	r24, 0x25	; 37
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC1);
 822:	61 e0       	ldi	r22, 0x01	; 1
 824:	85 e2       	ldi	r24, 0x25	; 37
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC2);
 82c:	62 e0       	ldi	r22, 0x02	; 2
 82e:	85 e2       	ldi	r24, 0x25	; 37
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC3);
 836:	63 e0       	ldi	r22, 0x03	; 3
 838:	85 e2       	ldi	r24, 0x25	; 37
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC4);
 840:	64 e0       	ldi	r22, 0x04	; 4
 842:	85 e2       	ldi	r24, 0x25	; 37
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC5);
 84a:	65 e0       	ldi	r22, 0x05	; 5
 84c:	85 e2       	ldi	r24, 0x25	; 37
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC6);
 854:	66 e0       	ldi	r22, 0x06	; 6
 856:	85 e2       	ldi	r24, 0x25	; 37
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC7);
 85e:	67 e0       	ldi	r22, 0x07	; 7
 860:	85 e2       	ldi	r24, 0x25	; 37
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        }
        counter++;
 868:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 86c:	8f 5f       	subi	r24, 0xFF	; 255
 86e:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <counter>
        if (counter <= 127)
 872:	88 23       	and	r24, r24
 874:	0c f4       	brge	.+2      	; 0x878 <__LOCK_REGION_LENGTH__+0x478>
 876:	3b c0       	rjmp	.+118    	; 0x8ee <__LOCK_REGION_LENGTH__+0x4ee>
        {
            if (counter %1 == 0)		GPIO_toggle(&PORTB, DAC1);
 878:	61 e0       	ldi	r22, 0x01	; 1
 87a:	85 e2       	ldi	r24, 0x25	; 37
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
            if (counter %2 == 0)		GPIO_toggle(&PORTB, DAC2);
 882:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 886:	80 fd       	sbrc	r24, 0
 888:	05 c0       	rjmp	.+10     	; 0x894 <__LOCK_REGION_LENGTH__+0x494>
 88a:	62 e0       	ldi	r22, 0x02	; 2
 88c:	85 e2       	ldi	r24, 0x25	; 37
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
            if (counter %4 == 0)		GPIO_toggle(&PORTB, DAC3);
 894:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 898:	83 70       	andi	r24, 0x03	; 3
 89a:	29 f4       	brne	.+10     	; 0x8a6 <__LOCK_REGION_LENGTH__+0x4a6>
 89c:	63 e0       	ldi	r22, 0x03	; 3
 89e:	85 e2       	ldi	r24, 0x25	; 37
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
            if (counter %8 == 0)		GPIO_toggle(&PORTB, DAC4);
 8a6:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 8aa:	87 70       	andi	r24, 0x07	; 7
 8ac:	29 f4       	brne	.+10     	; 0x8b8 <__LOCK_REGION_LENGTH__+0x4b8>
 8ae:	64 e0       	ldi	r22, 0x04	; 4
 8b0:	85 e2       	ldi	r24, 0x25	; 37
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
            if (counter %16 == 0)		GPIO_toggle(&PORTB, DAC5);
 8b8:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 8bc:	8f 70       	andi	r24, 0x0F	; 15
 8be:	29 f4       	brne	.+10     	; 0x8ca <__LOCK_REGION_LENGTH__+0x4ca>
 8c0:	65 e0       	ldi	r22, 0x05	; 5
 8c2:	85 e2       	ldi	r24, 0x25	; 37
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
            if (counter %32 == 0)		GPIO_toggle(&PORTB, DAC6);
 8ca:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 8ce:	8f 71       	andi	r24, 0x1F	; 31
 8d0:	29 f4       	brne	.+10     	; 0x8dc <__LOCK_REGION_LENGTH__+0x4dc>
 8d2:	66 e0       	ldi	r22, 0x06	; 6
 8d4:	85 e2       	ldi	r24, 0x25	; 37
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
            if (counter %64 == 0)		GPIO_toggle(&PORTB, DAC7);
 8dc:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 8e0:	8f 73       	andi	r24, 0x3F	; 63
 8e2:	29 f4       	brne	.+10     	; 0x8ee <__LOCK_REGION_LENGTH__+0x4ee>
 8e4:	67 e0       	ldi	r22, 0x07	; 7
 8e6:	85 e2       	ldi	r24, 0x25	; 37
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
        }
        if (counter == 127) counter=1;
 8ee:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 8f2:	8f 37       	cpi	r24, 0x7F	; 127
 8f4:	49 f4       	brne	.+18     	; 0x908 <__stack+0x9>
 8f6:	81 e0       	ldi	r24, 0x01	; 1
 8f8:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <counter>
    }

    // dirac pulses
    if (keypad == 6)
 8fc:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <__data_end>
 900:	86 30       	cpi	r24, 0x06	; 6
 902:	09 f0       	breq	.+2      	; 0x906 <__stack+0x7>
 904:	b6 c0       	rjmp	.+364    	; 0xa72 <__stack+0x173>
 906:	38 c0       	rjmp	.+112    	; 0x978 <__stack+0x79>
 908:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <__data_end>
 90c:	86 30       	cpi	r24, 0x06	; 6
 90e:	09 f0       	breq	.+2      	; 0x912 <__stack+0x13>
 910:	64 c0       	rjmp	.+200    	; 0x9da <__stack+0xdb>
    {
        if (counter == 255) counter = 0;
 912:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 916:	8f 3f       	cpi	r24, 0xFF	; 255
 918:	19 f4       	brne	.+6      	; 0x920 <__stack+0x21>
 91a:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <counter>
 91e:	04 c0       	rjmp	.+8      	; 0x928 <__stack+0x29>
        if (counter == 0)
 920:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 924:	81 11       	cpse	r24, r1
 926:	28 c0       	rjmp	.+80     	; 0x978 <__stack+0x79>
        {
            GPIO_write_high(&PORTB, DAC0);
 928:	60 e0       	ldi	r22, 0x00	; 0
 92a:	85 e2       	ldi	r24, 0x25	; 37
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
            GPIO_write_high(&PORTB, DAC1);
 932:	61 e0       	ldi	r22, 0x01	; 1
 934:	85 e2       	ldi	r24, 0x25	; 37
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
            GPIO_write_high(&PORTB, DAC2);
 93c:	62 e0       	ldi	r22, 0x02	; 2
 93e:	85 e2       	ldi	r24, 0x25	; 37
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
            GPIO_write_high(&PORTB, DAC3);
 946:	63 e0       	ldi	r22, 0x03	; 3
 948:	85 e2       	ldi	r24, 0x25	; 37
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
            GPIO_write_high(&PORTB, DAC4);
 950:	64 e0       	ldi	r22, 0x04	; 4
 952:	85 e2       	ldi	r24, 0x25	; 37
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
            GPIO_write_high(&PORTB, DAC5);
 95a:	65 e0       	ldi	r22, 0x05	; 5
 95c:	85 e2       	ldi	r24, 0x25	; 37
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
            GPIO_write_high(&PORTB, DAC6);
 964:	66 e0       	ldi	r22, 0x06	; 6
 966:	85 e2       	ldi	r24, 0x25	; 37
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
            GPIO_write_high(&PORTB, DAC7);
 96e:	67 e0       	ldi	r22, 0x07	; 7
 970:	85 e2       	ldi	r24, 0x25	; 37
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        }
        if (counter == 5)
 978:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 97c:	85 30       	cpi	r24, 0x05	; 5
 97e:	41 f5       	brne	.+80     	; 0x9d0 <__stack+0xd1>
        {
            GPIO_write_low(&PORTB, DAC0);
 980:	60 e0       	ldi	r22, 0x00	; 0
 982:	85 e2       	ldi	r24, 0x25	; 37
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC1);
 98a:	61 e0       	ldi	r22, 0x01	; 1
 98c:	85 e2       	ldi	r24, 0x25	; 37
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC2);
 994:	62 e0       	ldi	r22, 0x02	; 2
 996:	85 e2       	ldi	r24, 0x25	; 37
 998:	90 e0       	ldi	r25, 0x00	; 0
 99a:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC3);
 99e:	63 e0       	ldi	r22, 0x03	; 3
 9a0:	85 e2       	ldi	r24, 0x25	; 37
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC4);
 9a8:	64 e0       	ldi	r22, 0x04	; 4
 9aa:	85 e2       	ldi	r24, 0x25	; 37
 9ac:	90 e0       	ldi	r25, 0x00	; 0
 9ae:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC5);
 9b2:	65 e0       	ldi	r22, 0x05	; 5
 9b4:	85 e2       	ldi	r24, 0x25	; 37
 9b6:	90 e0       	ldi	r25, 0x00	; 0
 9b8:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC6);
 9bc:	66 e0       	ldi	r22, 0x06	; 6
 9be:	85 e2       	ldi	r24, 0x25	; 37
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC7);
 9c6:	67 e0       	ldi	r22, 0x07	; 7
 9c8:	85 e2       	ldi	r24, 0x25	; 37
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        }
        counter++;
 9d0:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 9d4:	8f 5f       	subi	r24, 0xFF	; 255
 9d6:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <counter>
    }

    // output = 0V
    if ((keypad == 7)||(keypad == 8)||(keypad == 9)||(keypad == 10)||(keypad == 11)||(keypad == 12))
 9da:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <__data_end>
 9de:	87 50       	subi	r24, 0x07	; 7
 9e0:	86 30       	cpi	r24, 0x06	; 6
 9e2:	08 f0       	brcs	.+2      	; 0x9e6 <__stack+0xe7>
 9e4:	4b c0       	rjmp	.+150    	; 0xa7c <__stack+0x17d>
    {
        if (counter == 255) counter = 0;
 9e6:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 9ea:	8f 3f       	cpi	r24, 0xFF	; 255
 9ec:	19 f4       	brne	.+6      	; 0x9f4 <__stack+0xf5>
 9ee:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <counter>
 9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <__stack+0xf9>
        if (counter == 0)
 9f4:	81 11       	cpse	r24, r1
 9f6:	28 c0       	rjmp	.+80     	; 0xa48 <__stack+0x149>
        {
            GPIO_write_low(&PORTB, DAC0);
 9f8:	60 e0       	ldi	r22, 0x00	; 0
 9fa:	85 e2       	ldi	r24, 0x25	; 37
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC1);
 a02:	61 e0       	ldi	r22, 0x01	; 1
 a04:	85 e2       	ldi	r24, 0x25	; 37
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC2);
 a0c:	62 e0       	ldi	r22, 0x02	; 2
 a0e:	85 e2       	ldi	r24, 0x25	; 37
 a10:	90 e0       	ldi	r25, 0x00	; 0
 a12:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC3);
 a16:	63 e0       	ldi	r22, 0x03	; 3
 a18:	85 e2       	ldi	r24, 0x25	; 37
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC4);
 a20:	64 e0       	ldi	r22, 0x04	; 4
 a22:	85 e2       	ldi	r24, 0x25	; 37
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC5);
 a2a:	65 e0       	ldi	r22, 0x05	; 5
 a2c:	85 e2       	ldi	r24, 0x25	; 37
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC6);
 a34:	66 e0       	ldi	r22, 0x06	; 6
 a36:	85 e2       	ldi	r24, 0x25	; 37
 a38:	90 e0       	ldi	r25, 0x00	; 0
 a3a:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, DAC7);
 a3e:	67 e0       	ldi	r22, 0x07	; 7
 a40:	85 e2       	ldi	r24, 0x25	; 37
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        }
        counter++;
 a48:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 a4c:	8f 5f       	subi	r24, 0xFF	; 255
 a4e:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <counter>
    }
}
 a52:	14 c0       	rjmp	.+40     	; 0xa7c <__stack+0x17d>
        }
        if (counter == 255) counter = 0;
    }

    // rising sawtooth wave
    if (keypad == 3)
 a54:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <__data_end>
 a58:	83 30       	cpi	r24, 0x03	; 3
 a5a:	09 f0       	breq	.+2      	; 0xa5e <__stack+0x15f>
 a5c:	55 ce       	rjmp	.-854    	; 0x708 <__LOCK_REGION_LENGTH__+0x308>
 a5e:	df cd       	rjmp	.-1090   	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
 a60:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <__data_end>
 a64:	83 30       	cpi	r24, 0x03	; 3
 a66:	09 f0       	breq	.+2      	; 0xa6a <__stack+0x16b>
 a68:	4f ce       	rjmp	.-866    	; 0x708 <__LOCK_REGION_LENGTH__+0x308>
 a6a:	d9 cd       	rjmp	.-1102   	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
    }

    // output = 0V
    if ((keypad == 7)||(keypad == 8)||(keypad == 9)||(keypad == 10)||(keypad == 11)||(keypad == 12))
    {
        if (counter == 255) counter = 0;
 a6c:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <counter>
 a70:	c1 cf       	rjmp	.-126    	; 0x9f4 <__stack+0xf5>
        }
        counter++;
    }

    // output = 0V
    if ((keypad == 7)||(keypad == 8)||(keypad == 9)||(keypad == 10)||(keypad == 11)||(keypad == 12))
 a72:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <__data_end>
 a76:	87 50       	subi	r24, 0x07	; 7
 a78:	86 30       	cpi	r24, 0x06	; 6
 a7a:	c0 f3       	brcs	.-16     	; 0xa6c <__stack+0x16d>
            GPIO_write_low(&PORTB, DAC6);
            GPIO_write_low(&PORTB, DAC7);
        }
        counter++;
    }
}
 a7c:	ff 91       	pop	r31
 a7e:	ef 91       	pop	r30
 a80:	cf 91       	pop	r28
 a82:	bf 91       	pop	r27
 a84:	af 91       	pop	r26
 a86:	9f 91       	pop	r25
 a88:	8f 91       	pop	r24
 a8a:	7f 91       	pop	r23
 a8c:	6f 91       	pop	r22
 a8e:	5f 91       	pop	r21
 a90:	4f 91       	pop	r20
 a92:	3f 91       	pop	r19
 a94:	2f 91       	pop	r18
 a96:	0f 90       	pop	r0
 a98:	0f be       	out	0x3f, r0	; 63
 a9a:	0f 90       	pop	r0
 a9c:	1f 90       	pop	r1
 a9e:	18 95       	reti

00000aa0 <__vector_13>:

// Interrupts from Timer/Counter1 control Keypad, Display and UART
ISR(TIMER1_OVF_vect)
{
 aa0:	1f 92       	push	r1
 aa2:	0f 92       	push	r0
 aa4:	0f b6       	in	r0, 0x3f	; 63
 aa6:	0f 92       	push	r0
 aa8:	11 24       	eor	r1, r1
 aaa:	2f 93       	push	r18
 aac:	3f 93       	push	r19
 aae:	4f 93       	push	r20
 ab0:	5f 93       	push	r21
 ab2:	6f 93       	push	r22
 ab4:	7f 93       	push	r23
 ab6:	8f 93       	push	r24
 ab8:	9f 93       	push	r25
 aba:	af 93       	push	r26
 abc:	bf 93       	push	r27
 abe:	ef 93       	push	r30
 ac0:	ff 93       	push	r31
    // 4x3 keypad service
    GPIO_write_high(&PORTC, KEYPAD3);
 ac2:	63 e0       	ldi	r22, 0x03	; 3
 ac4:	88 e2       	ldi	r24, 0x28	; 40
 ac6:	90 e0       	ldi	r25, 0x00	; 0
 ac8:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
    GPIO_write_low(&PORTC, KEYPAD4);
 acc:	64 e0       	ldi	r22, 0x04	; 4
 ace:	88 e2       	ldi	r24, 0x28	; 40
 ad0:	90 e0       	ldi	r25, 0x00	; 0
 ad2:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
    GPIO_write_low(&PORTC, KEYPAD5);
 ad6:	65 e0       	ldi	r22, 0x05	; 5
 ad8:	88 e2       	ldi	r24, 0x28	; 40
 ada:	90 e0       	ldi	r25, 0x00	; 0
 adc:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
    GPIO_write_low(&PORTC, KEYPAD6);
 ae0:	66 e0       	ldi	r22, 0x06	; 6
 ae2:	88 e2       	ldi	r24, 0x28	; 40
 ae4:	90 e0       	ldi	r25, 0x00	; 0
 ae6:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
    if (GPIO_read(&PINC, KEYPAD0) == 1)     {keypad = 1; counter=0;}
 aea:	60 e0       	ldi	r22, 0x00	; 0
 aec:	86 e2       	ldi	r24, 0x26	; 38
 aee:	90 e0       	ldi	r25, 0x00	; 0
 af0:	0e 94 95 00 	call	0x12a	; 0x12a <GPIO_read>
 af4:	81 30       	cpi	r24, 0x01	; 1
 af6:	21 f4       	brne	.+8      	; 0xb00 <__vector_13+0x60>
 af8:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <__data_end>
 afc:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <counter>
    if (GPIO_read(&PINC, KEYPAD1) == 1)     {keypad = 2; counter=0;}
 b00:	61 e0       	ldi	r22, 0x01	; 1
 b02:	86 e2       	ldi	r24, 0x26	; 38
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	0e 94 95 00 	call	0x12a	; 0x12a <GPIO_read>
 b0a:	81 30       	cpi	r24, 0x01	; 1
 b0c:	29 f4       	brne	.+10     	; 0xb18 <__vector_13+0x78>
 b0e:	82 e0       	ldi	r24, 0x02	; 2
 b10:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <__data_end>
 b14:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <counter>
    if (GPIO_read(&PINC, KEYPAD2) == 1)     {keypad = 3; counter=0;}
 b18:	62 e0       	ldi	r22, 0x02	; 2
 b1a:	86 e2       	ldi	r24, 0x26	; 38
 b1c:	90 e0       	ldi	r25, 0x00	; 0
 b1e:	0e 94 95 00 	call	0x12a	; 0x12a <GPIO_read>
 b22:	81 30       	cpi	r24, 0x01	; 1
 b24:	29 f4       	brne	.+10     	; 0xb30 <__vector_13+0x90>
 b26:	83 e0       	ldi	r24, 0x03	; 3
 b28:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <__data_end>
 b2c:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <counter>
    GPIO_write_low(&PORTC, KEYPAD3);
 b30:	63 e0       	ldi	r22, 0x03	; 3
 b32:	88 e2       	ldi	r24, 0x28	; 40
 b34:	90 e0       	ldi	r25, 0x00	; 0
 b36:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
    GPIO_write_high(&PORTC, KEYPAD4);
 b3a:	64 e0       	ldi	r22, 0x04	; 4
 b3c:	88 e2       	ldi	r24, 0x28	; 40
 b3e:	90 e0       	ldi	r25, 0x00	; 0
 b40:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
    GPIO_write_low(&PORTC, KEYPAD5);
 b44:	65 e0       	ldi	r22, 0x05	; 5
 b46:	88 e2       	ldi	r24, 0x28	; 40
 b48:	90 e0       	ldi	r25, 0x00	; 0
 b4a:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
    GPIO_write_low(&PORTC, KEYPAD6);
 b4e:	66 e0       	ldi	r22, 0x06	; 6
 b50:	88 e2       	ldi	r24, 0x28	; 40
 b52:	90 e0       	ldi	r25, 0x00	; 0
 b54:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
    if (GPIO_read(&PINC, KEYPAD0) == 1)     {keypad = 4; counter=0;}
 b58:	60 e0       	ldi	r22, 0x00	; 0
 b5a:	86 e2       	ldi	r24, 0x26	; 38
 b5c:	90 e0       	ldi	r25, 0x00	; 0
 b5e:	0e 94 95 00 	call	0x12a	; 0x12a <GPIO_read>
 b62:	81 30       	cpi	r24, 0x01	; 1
 b64:	29 f4       	brne	.+10     	; 0xb70 <__vector_13+0xd0>
 b66:	84 e0       	ldi	r24, 0x04	; 4
 b68:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <__data_end>
 b6c:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <counter>
    if (GPIO_read(&PINC, KEYPAD1) == 1)     {keypad = 5; counter=0;}
 b70:	61 e0       	ldi	r22, 0x01	; 1
 b72:	86 e2       	ldi	r24, 0x26	; 38
 b74:	90 e0       	ldi	r25, 0x00	; 0
 b76:	0e 94 95 00 	call	0x12a	; 0x12a <GPIO_read>
 b7a:	81 30       	cpi	r24, 0x01	; 1
 b7c:	29 f4       	brne	.+10     	; 0xb88 <__vector_13+0xe8>
 b7e:	85 e0       	ldi	r24, 0x05	; 5
 b80:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <__data_end>
 b84:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <counter>
    if (GPIO_read(&PINC, KEYPAD2) == 1)     {keypad = 6; counter=0;}
 b88:	62 e0       	ldi	r22, 0x02	; 2
 b8a:	86 e2       	ldi	r24, 0x26	; 38
 b8c:	90 e0       	ldi	r25, 0x00	; 0
 b8e:	0e 94 95 00 	call	0x12a	; 0x12a <GPIO_read>
 b92:	81 30       	cpi	r24, 0x01	; 1
 b94:	29 f4       	brne	.+10     	; 0xba0 <__vector_13+0x100>
 b96:	86 e0       	ldi	r24, 0x06	; 6
 b98:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <__data_end>
 b9c:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <counter>
    GPIO_write_low(&PORTC, KEYPAD3);
 ba0:	63 e0       	ldi	r22, 0x03	; 3
 ba2:	88 e2       	ldi	r24, 0x28	; 40
 ba4:	90 e0       	ldi	r25, 0x00	; 0
 ba6:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
    GPIO_write_low(&PORTC, KEYPAD4);
 baa:	64 e0       	ldi	r22, 0x04	; 4
 bac:	88 e2       	ldi	r24, 0x28	; 40
 bae:	90 e0       	ldi	r25, 0x00	; 0
 bb0:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
    GPIO_write_high(&PORTC, KEYPAD5);
 bb4:	65 e0       	ldi	r22, 0x05	; 5
 bb6:	88 e2       	ldi	r24, 0x28	; 40
 bb8:	90 e0       	ldi	r25, 0x00	; 0
 bba:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
    GPIO_write_low(&PORTC, KEYPAD6);
 bbe:	66 e0       	ldi	r22, 0x06	; 6
 bc0:	88 e2       	ldi	r24, 0x28	; 40
 bc2:	90 e0       	ldi	r25, 0x00	; 0
 bc4:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
    if (GPIO_read(&PINC, KEYPAD0) == 1)     {keypad = 7; counter=0;}
 bc8:	60 e0       	ldi	r22, 0x00	; 0
 bca:	86 e2       	ldi	r24, 0x26	; 38
 bcc:	90 e0       	ldi	r25, 0x00	; 0
 bce:	0e 94 95 00 	call	0x12a	; 0x12a <GPIO_read>
 bd2:	81 30       	cpi	r24, 0x01	; 1
 bd4:	29 f4       	brne	.+10     	; 0xbe0 <__vector_13+0x140>
 bd6:	87 e0       	ldi	r24, 0x07	; 7
 bd8:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <__data_end>
 bdc:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <counter>
    if (GPIO_read(&PINC, KEYPAD1) == 1)     {keypad = 8; counter=0;}
 be0:	61 e0       	ldi	r22, 0x01	; 1
 be2:	86 e2       	ldi	r24, 0x26	; 38
 be4:	90 e0       	ldi	r25, 0x00	; 0
 be6:	0e 94 95 00 	call	0x12a	; 0x12a <GPIO_read>
 bea:	81 30       	cpi	r24, 0x01	; 1
 bec:	29 f4       	brne	.+10     	; 0xbf8 <__vector_13+0x158>
 bee:	88 e0       	ldi	r24, 0x08	; 8
 bf0:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <__data_end>
 bf4:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <counter>
    if (GPIO_read(&PINC, KEYPAD2) == 1)     {keypad = 9; counter=0;}
 bf8:	62 e0       	ldi	r22, 0x02	; 2
 bfa:	86 e2       	ldi	r24, 0x26	; 38
 bfc:	90 e0       	ldi	r25, 0x00	; 0
 bfe:	0e 94 95 00 	call	0x12a	; 0x12a <GPIO_read>
 c02:	81 30       	cpi	r24, 0x01	; 1
 c04:	29 f4       	brne	.+10     	; 0xc10 <__vector_13+0x170>
 c06:	89 e0       	ldi	r24, 0x09	; 9
 c08:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <__data_end>
 c0c:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <counter>
    GPIO_write_low(&PORTC, KEYPAD3);
 c10:	63 e0       	ldi	r22, 0x03	; 3
 c12:	88 e2       	ldi	r24, 0x28	; 40
 c14:	90 e0       	ldi	r25, 0x00	; 0
 c16:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
    GPIO_write_low(&PORTC, KEYPAD4);
 c1a:	64 e0       	ldi	r22, 0x04	; 4
 c1c:	88 e2       	ldi	r24, 0x28	; 40
 c1e:	90 e0       	ldi	r25, 0x00	; 0
 c20:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
    GPIO_write_low(&PORTC, KEYPAD5);
 c24:	65 e0       	ldi	r22, 0x05	; 5
 c26:	88 e2       	ldi	r24, 0x28	; 40
 c28:	90 e0       	ldi	r25, 0x00	; 0
 c2a:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
    GPIO_write_high(&PORTC, KEYPAD6);
 c2e:	66 e0       	ldi	r22, 0x06	; 6
 c30:	88 e2       	ldi	r24, 0x28	; 40
 c32:	90 e0       	ldi	r25, 0x00	; 0
 c34:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
    if (GPIO_read(&PINC, KEYPAD0) == 1)     {keypad = 10; counter=0;}
 c38:	60 e0       	ldi	r22, 0x00	; 0
 c3a:	86 e2       	ldi	r24, 0x26	; 38
 c3c:	90 e0       	ldi	r25, 0x00	; 0
 c3e:	0e 94 95 00 	call	0x12a	; 0x12a <GPIO_read>
 c42:	81 30       	cpi	r24, 0x01	; 1
 c44:	29 f4       	brne	.+10     	; 0xc50 <__vector_13+0x1b0>
 c46:	8a e0       	ldi	r24, 0x0A	; 10
 c48:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <__data_end>
 c4c:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <counter>
    if (GPIO_read(&PINC, KEYPAD1) == 1)     {keypad = 11; counter=0;}
 c50:	61 e0       	ldi	r22, 0x01	; 1
 c52:	86 e2       	ldi	r24, 0x26	; 38
 c54:	90 e0       	ldi	r25, 0x00	; 0
 c56:	0e 94 95 00 	call	0x12a	; 0x12a <GPIO_read>
 c5a:	81 30       	cpi	r24, 0x01	; 1
 c5c:	29 f4       	brne	.+10     	; 0xc68 <__vector_13+0x1c8>
 c5e:	8b e0       	ldi	r24, 0x0B	; 11
 c60:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <__data_end>
 c64:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <counter>
    if (GPIO_read(&PINC, KEYPAD2) == 1)     {keypad = 12; counter=0;}
 c68:	62 e0       	ldi	r22, 0x02	; 2
 c6a:	86 e2       	ldi	r24, 0x26	; 38
 c6c:	90 e0       	ldi	r25, 0x00	; 0
 c6e:	0e 94 95 00 	call	0x12a	; 0x12a <GPIO_read>
 c72:	81 30       	cpi	r24, 0x01	; 1
 c74:	31 f4       	brne	.+12     	; 0xc82 <__vector_13+0x1e2>
 c76:	8c e0       	ldi	r24, 0x0C	; 12
 c78:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <__data_end>
 c7c:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <counter>
 c80:	20 c0       	rjmp	.+64     	; 0xcc2 <__vector_13+0x222>

    // Displaying chosen signal on an LCD and UART transmitting
    if (keypad == 0) uart_puts("Waiting for input \r\n");                                                   // keypad value = 0, waiting for input
 c82:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <__data_end>
 c86:	81 11       	cpse	r24, r1
 c88:	04 c0       	rjmp	.+8      	; 0xc92 <__vector_13+0x1f2>
 c8a:	8e e0       	ldi	r24, 0x0E	; 14
 c8c:	92 e0       	ldi	r25, 0x02	; 2
 c8e:	0e 94 89 07 	call	0xf12	; 0xf12 <uart_puts>
    if (keypad == 1)                                                                                        // keypad value = 1, sine wave generation
 c92:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <__data_end>
 c96:	81 30       	cpi	r24, 0x01	; 1
 c98:	a1 f4       	brne	.+40     	; 0xcc2 <__vector_13+0x222>
    {
        lcd_gotoxy(0, 1);
 c9a:	61 e0       	ldi	r22, 0x01	; 1
 c9c:	80 e0       	ldi	r24, 0x00	; 0
 c9e:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
        lcd_puts("                ");
 ca2:	83 e2       	ldi	r24, 0x23	; 35
 ca4:	92 e0       	ldi	r25, 0x02	; 2
 ca6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
        lcd_gotoxy(0, 1);
 caa:	61 e0       	ldi	r22, 0x01	; 1
 cac:	80 e0       	ldi	r24, 0x00	; 0
 cae:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
        lcd_puts("Sine");
 cb2:	84 e3       	ldi	r24, 0x34	; 52
 cb4:	92 e0       	ldi	r25, 0x02	; 2
 cb6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
        uart_puts("Output signal: Sine wave \r\n");
 cba:	89 e3       	ldi	r24, 0x39	; 57
 cbc:	92 e0       	ldi	r25, 0x02	; 2
 cbe:	0e 94 89 07 	call	0xf12	; 0xf12 <uart_puts>
    }
    if (keypad == 2)                                                                                        // keypad value = 2, square wave generation
 cc2:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <__data_end>
 cc6:	82 30       	cpi	r24, 0x02	; 2
 cc8:	a1 f4       	brne	.+40     	; 0xcf2 <__vector_13+0x252>
    {
        lcd_gotoxy(0, 1);
 cca:	61 e0       	ldi	r22, 0x01	; 1
 ccc:	80 e0       	ldi	r24, 0x00	; 0
 cce:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
        lcd_puts("                ");
 cd2:	83 e2       	ldi	r24, 0x23	; 35
 cd4:	92 e0       	ldi	r25, 0x02	; 2
 cd6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
        lcd_gotoxy(0, 1);
 cda:	61 e0       	ldi	r22, 0x01	; 1
 cdc:	80 e0       	ldi	r24, 0x00	; 0
 cde:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
        lcd_puts("Square");
 ce2:	85 e5       	ldi	r24, 0x55	; 85
 ce4:	92 e0       	ldi	r25, 0x02	; 2
 ce6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
        uart_puts("Output signal: Square wave \r\n");
 cea:	8c e5       	ldi	r24, 0x5C	; 92
 cec:	92 e0       	ldi	r25, 0x02	; 2
 cee:	0e 94 89 07 	call	0xf12	; 0xf12 <uart_puts>
    }
    if (keypad == 3)                                                                                        // keypad value = 3, rising sawtooth wave generation
 cf2:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <__data_end>
 cf6:	83 30       	cpi	r24, 0x03	; 3
 cf8:	a1 f4       	brne	.+40     	; 0xd22 <__vector_13+0x282>
    {
        lcd_gotoxy(0, 1);
 cfa:	61 e0       	ldi	r22, 0x01	; 1
 cfc:	80 e0       	ldi	r24, 0x00	; 0
 cfe:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
        lcd_puts("                ");
 d02:	83 e2       	ldi	r24, 0x23	; 35
 d04:	92 e0       	ldi	r25, 0x02	; 2
 d06:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
        lcd_gotoxy(0, 1);
 d0a:	61 e0       	ldi	r22, 0x01	; 1
 d0c:	80 e0       	ldi	r24, 0x00	; 0
 d0e:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
        lcd_puts("Rising Sawtooth");
 d12:	8a e7       	ldi	r24, 0x7A	; 122
 d14:	92 e0       	ldi	r25, 0x02	; 2
 d16:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
        uart_puts("Output signal: Rising sawtooth wave \r\n");
 d1a:	8a e8       	ldi	r24, 0x8A	; 138
 d1c:	92 e0       	ldi	r25, 0x02	; 2
 d1e:	0e 94 89 07 	call	0xf12	; 0xf12 <uart_puts>
    }
    if (keypad == 4)                                                                                        // keypad value = 4, falling sawtooth wave generation
 d22:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <__data_end>
 d26:	84 30       	cpi	r24, 0x04	; 4
 d28:	a1 f4       	brne	.+40     	; 0xd52 <__vector_13+0x2b2>
    {
        lcd_gotoxy(0, 1);
 d2a:	61 e0       	ldi	r22, 0x01	; 1
 d2c:	80 e0       	ldi	r24, 0x00	; 0
 d2e:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
        lcd_puts("                ");
 d32:	83 e2       	ldi	r24, 0x23	; 35
 d34:	92 e0       	ldi	r25, 0x02	; 2
 d36:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
        lcd_gotoxy(0, 1);
 d3a:	61 e0       	ldi	r22, 0x01	; 1
 d3c:	80 e0       	ldi	r24, 0x00	; 0
 d3e:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
        lcd_puts("Falling Sawtooth");
 d42:	81 eb       	ldi	r24, 0xB1	; 177
 d44:	92 e0       	ldi	r25, 0x02	; 2
 d46:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
        uart_puts("Output signal: Falling sawtooth wave \r\n");
 d4a:	82 ec       	ldi	r24, 0xC2	; 194
 d4c:	92 e0       	ldi	r25, 0x02	; 2
 d4e:	0e 94 89 07 	call	0xf12	; 0xf12 <uart_puts>
    }
    if (keypad == 5)                                                                                        // keypad value = 5, triangle wave generation
 d52:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <__data_end>
 d56:	85 30       	cpi	r24, 0x05	; 5
 d58:	a1 f4       	brne	.+40     	; 0xd82 <__vector_13+0x2e2>
    {
        lcd_gotoxy(0, 1);
 d5a:	61 e0       	ldi	r22, 0x01	; 1
 d5c:	80 e0       	ldi	r24, 0x00	; 0
 d5e:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
        lcd_puts("                ");
 d62:	83 e2       	ldi	r24, 0x23	; 35
 d64:	92 e0       	ldi	r25, 0x02	; 2
 d66:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
        lcd_gotoxy(0, 1);
 d6a:	61 e0       	ldi	r22, 0x01	; 1
 d6c:	80 e0       	ldi	r24, 0x00	; 0
 d6e:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
        lcd_puts("Triangle");
 d72:	8a ee       	ldi	r24, 0xEA	; 234
 d74:	92 e0       	ldi	r25, 0x02	; 2
 d76:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
        uart_puts("Output signal: Triangle wave \r\n");
 d7a:	83 ef       	ldi	r24, 0xF3	; 243
 d7c:	92 e0       	ldi	r25, 0x02	; 2
 d7e:	0e 94 89 07 	call	0xf12	; 0xf12 <uart_puts>
    }
    if (keypad == 6)                                                                                        // keypad value = 6, dirac pulses generation
 d82:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <__data_end>
 d86:	86 30       	cpi	r24, 0x06	; 6
 d88:	a1 f4       	brne	.+40     	; 0xdb2 <__vector_13+0x312>
    {
        lcd_gotoxy(0, 1);
 d8a:	61 e0       	ldi	r22, 0x01	; 1
 d8c:	80 e0       	ldi	r24, 0x00	; 0
 d8e:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
        lcd_puts("                ");
 d92:	83 e2       	ldi	r24, 0x23	; 35
 d94:	92 e0       	ldi	r25, 0x02	; 2
 d96:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
        lcd_gotoxy(0, 1);
 d9a:	61 e0       	ldi	r22, 0x01	; 1
 d9c:	80 e0       	ldi	r24, 0x00	; 0
 d9e:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
        lcd_puts("Dirac pulses");
 da2:	83 e1       	ldi	r24, 0x13	; 19
 da4:	93 e0       	ldi	r25, 0x03	; 3
 da6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
        uart_puts("Output signal: Dirac pulses \r\n");
 daa:	80 e2       	ldi	r24, 0x20	; 32
 dac:	93 e0       	ldi	r25, 0x03	; 3
 dae:	0e 94 89 07 	call	0xf12	; 0xf12 <uart_puts>
    }
    if ((keypad == 7)||(keypad == 8)||(keypad == 9)||(keypad == 10)||(keypad == 11)||(keypad == 12))        // keypad value = (7|8|9|10|11|12), 0V generation
 db2:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <__data_end>
 db6:	87 50       	subi	r24, 0x07	; 7
 db8:	86 30       	cpi	r24, 0x06	; 6
 dba:	a0 f4       	brcc	.+40     	; 0xde4 <__vector_13+0x344>
    {
        lcd_gotoxy(0, 1);
 dbc:	61 e0       	ldi	r22, 0x01	; 1
 dbe:	80 e0       	ldi	r24, 0x00	; 0
 dc0:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
        lcd_puts("                ");
 dc4:	83 e2       	ldi	r24, 0x23	; 35
 dc6:	92 e0       	ldi	r25, 0x02	; 2
 dc8:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
        lcd_gotoxy(0, 1);
 dcc:	61 e0       	ldi	r22, 0x01	; 1
 dce:	80 e0       	ldi	r24, 0x00	; 0
 dd0:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
        lcd_puts(" ---- None ---- ");
 dd4:	8f e3       	ldi	r24, 0x3F	; 63
 dd6:	93 e0       	ldi	r25, 0x03	; 3
 dd8:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
        uart_puts("Output signal: ---- None ---- \r\n");
 ddc:	80 e5       	ldi	r24, 0x50	; 80
 dde:	93 e0       	ldi	r25, 0x03	; 3
 de0:	0e 94 89 07 	call	0xf12	; 0xf12 <uart_puts>
    }
}
 de4:	ff 91       	pop	r31
 de6:	ef 91       	pop	r30
 de8:	bf 91       	pop	r27
 dea:	af 91       	pop	r26
 dec:	9f 91       	pop	r25
 dee:	8f 91       	pop	r24
 df0:	7f 91       	pop	r23
 df2:	6f 91       	pop	r22
 df4:	5f 91       	pop	r21
 df6:	4f 91       	pop	r20
 df8:	3f 91       	pop	r19
 dfa:	2f 91       	pop	r18
 dfc:	0f 90       	pop	r0
 dfe:	0f be       	out	0x3f, r0	; 63
 e00:	0f 90       	pop	r0
 e02:	1f 90       	pop	r1
 e04:	18 95       	reti

00000e06 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 e06:	1f 92       	push	r1
 e08:	0f 92       	push	r0
 e0a:	0f b6       	in	r0, 0x3f	; 63
 e0c:	0f 92       	push	r0
 e0e:	11 24       	eor	r1, r1
 e10:	2f 93       	push	r18
 e12:	8f 93       	push	r24
 e14:	9f 93       	push	r25
 e16:	ef 93       	push	r30
 e18:	ff 93       	push	r31
 e1a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 e1e:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 e22:	8c 71       	andi	r24, 0x1C	; 28
 e24:	e0 91 76 03 	lds	r30, 0x0376	; 0x800376 <UART_RxHead>
 e28:	ef 5f       	subi	r30, 0xFF	; 255
 e2a:	ef 71       	andi	r30, 0x1F	; 31
 e2c:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <UART_RxTail>
 e30:	e9 17       	cp	r30, r25
 e32:	39 f0       	breq	.+14     	; 0xe42 <__vector_18+0x3c>
 e34:	e0 93 76 03 	sts	0x0376, r30	; 0x800376 <UART_RxHead>
 e38:	f0 e0       	ldi	r31, 0x00	; 0
 e3a:	e7 58       	subi	r30, 0x87	; 135
 e3c:	fc 4f       	sbci	r31, 0xFC	; 252
 e3e:	20 83       	st	Z, r18
 e40:	01 c0       	rjmp	.+2      	; 0xe44 <__vector_18+0x3e>
 e42:	82 e0       	ldi	r24, 0x02	; 2
 e44:	90 91 74 03 	lds	r25, 0x0374	; 0x800374 <UART_LastRxError>
 e48:	89 2b       	or	r24, r25
 e4a:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <UART_LastRxError>
 e4e:	ff 91       	pop	r31
 e50:	ef 91       	pop	r30
 e52:	9f 91       	pop	r25
 e54:	8f 91       	pop	r24
 e56:	2f 91       	pop	r18
 e58:	0f 90       	pop	r0
 e5a:	0f be       	out	0x3f, r0	; 63
 e5c:	0f 90       	pop	r0
 e5e:	1f 90       	pop	r1
 e60:	18 95       	reti

00000e62 <__vector_19>:
 e62:	1f 92       	push	r1
 e64:	0f 92       	push	r0
 e66:	0f b6       	in	r0, 0x3f	; 63
 e68:	0f 92       	push	r0
 e6a:	11 24       	eor	r1, r1
 e6c:	8f 93       	push	r24
 e6e:	9f 93       	push	r25
 e70:	ef 93       	push	r30
 e72:	ff 93       	push	r31
 e74:	90 91 78 03 	lds	r25, 0x0378	; 0x800378 <UART_TxHead>
 e78:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <UART_TxTail>
 e7c:	98 17       	cp	r25, r24
 e7e:	69 f0       	breq	.+26     	; 0xe9a <__vector_19+0x38>
 e80:	e0 91 77 03 	lds	r30, 0x0377	; 0x800377 <UART_TxTail>
 e84:	ef 5f       	subi	r30, 0xFF	; 255
 e86:	ef 73       	andi	r30, 0x3F	; 63
 e88:	e0 93 77 03 	sts	0x0377, r30	; 0x800377 <UART_TxTail>
 e8c:	f0 e0       	ldi	r31, 0x00	; 0
 e8e:	e7 56       	subi	r30, 0x67	; 103
 e90:	fc 4f       	sbci	r31, 0xFC	; 252
 e92:	80 81       	ld	r24, Z
 e94:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 e98:	05 c0       	rjmp	.+10     	; 0xea4 <__vector_19+0x42>
 e9a:	e1 ec       	ldi	r30, 0xC1	; 193
 e9c:	f0 e0       	ldi	r31, 0x00	; 0
 e9e:	80 81       	ld	r24, Z
 ea0:	8f 7d       	andi	r24, 0xDF	; 223
 ea2:	80 83       	st	Z, r24
 ea4:	ff 91       	pop	r31
 ea6:	ef 91       	pop	r30
 ea8:	9f 91       	pop	r25
 eaa:	8f 91       	pop	r24
 eac:	0f 90       	pop	r0
 eae:	0f be       	out	0x3f, r0	; 63
 eb0:	0f 90       	pop	r0
 eb2:	1f 90       	pop	r1
 eb4:	18 95       	reti

00000eb6 <uart_init>:
 eb6:	10 92 78 03 	sts	0x0378, r1	; 0x800378 <UART_TxHead>
 eba:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <UART_TxTail>
 ebe:	10 92 76 03 	sts	0x0376, r1	; 0x800376 <UART_RxHead>
 ec2:	10 92 75 03 	sts	0x0375, r1	; 0x800375 <UART_RxTail>
 ec6:	99 23       	and	r25, r25
 ec8:	1c f4       	brge	.+6      	; 0xed0 <uart_init+0x1a>
 eca:	22 e0       	ldi	r18, 0x02	; 2
 ecc:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 ed0:	90 78       	andi	r25, 0x80	; 128
 ed2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 ed6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 eda:	88 e9       	ldi	r24, 0x98	; 152
 edc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 ee0:	86 e0       	ldi	r24, 0x06	; 6
 ee2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 ee6:	08 95       	ret

00000ee8 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 ee8:	20 91 78 03 	lds	r18, 0x0378	; 0x800378 <UART_TxHead>
 eec:	2f 5f       	subi	r18, 0xFF	; 255
 eee:	2f 73       	andi	r18, 0x3F	; 63

    while (tmphead == UART_TxTail)
 ef0:	90 91 77 03 	lds	r25, 0x0377	; 0x800377 <UART_TxTail>
 ef4:	29 17       	cp	r18, r25
 ef6:	e1 f3       	breq	.-8      	; 0xef0 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 ef8:	e2 2f       	mov	r30, r18
 efa:	f0 e0       	ldi	r31, 0x00	; 0
 efc:	e7 56       	subi	r30, 0x67	; 103
 efe:	fc 4f       	sbci	r31, 0xFC	; 252
 f00:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 f02:	20 93 78 03 	sts	0x0378, r18	; 0x800378 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 f06:	e1 ec       	ldi	r30, 0xC1	; 193
 f08:	f0 e0       	ldi	r31, 0x00	; 0
 f0a:	80 81       	ld	r24, Z
 f0c:	80 62       	ori	r24, 0x20	; 32
 f0e:	80 83       	st	Z, r24
 f10:	08 95       	ret

00000f12 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 f12:	cf 93       	push	r28
 f14:	df 93       	push	r29
 f16:	ec 01       	movw	r28, r24
    while (*s)
 f18:	88 81       	ld	r24, Y
 f1a:	88 23       	and	r24, r24
 f1c:	31 f0       	breq	.+12     	; 0xf2a <uart_puts+0x18>
 f1e:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 f20:	0e 94 74 07 	call	0xee8	; 0xee8 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 f24:	89 91       	ld	r24, Y+
 f26:	81 11       	cpse	r24, r1
 f28:	fb cf       	rjmp	.-10     	; 0xf20 <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 f2a:	df 91       	pop	r29
 f2c:	cf 91       	pop	r28
 f2e:	08 95       	ret

00000f30 <_exit>:
 f30:	f8 94       	cli

00000f32 <__stop_program>:
 f32:	ff cf       	rjmp	.-2      	; 0xf32 <__stop_program>
